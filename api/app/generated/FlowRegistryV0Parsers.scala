/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1
 * apidoc:0.11.6 http://www.apidoc.me/flow/registry/0.0.1/anorm_2_x_parsers
 */
import anorm._

package io.flow.registry.v0.anorm.parsers {

  import io.flow.registry.v0.anorm.conversions.Json._

  object ApplicationType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "application_type"): RowParser[io.flow.registry.v0.models.ApplicationType] = {
      SqlParser.str(name) map {
        case value => io.flow.registry.v0.models.ApplicationType(value)
      }
    }

  }

  object Application {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      ports = s"$prefix${sep}ports"
    )

    def parser(
      id: String = "id",
      ports: String = "ports"
    ): RowParser[io.flow.registry.v0.models.Application] = {
      SqlParser.str(id) ~
      SqlParser.get[Seq[io.flow.registry.v0.models.Port]](ports) map {
        case id ~ ports => {
          io.flow.registry.v0.models.Application(
            id = id,
            ports = ports
          )
        }
      }
    }

  }

  object ApplicationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      applicationType = s"$prefix${sep}application_type"
    )

    def parser(
      id: String = "id",
      applicationType: String = "application_type"
    ): RowParser[io.flow.registry.v0.models.ApplicationForm] = {
      SqlParser.str(id) ~
      io.flow.registry.v0.anorm.parsers.ApplicationType.parser(applicationType) map {
        case id ~ applicationType => {
          io.flow.registry.v0.models.ApplicationForm(
            id = id,
            applicationType = applicationType
          )
        }
      }
    }

  }

  object ApplicationPutForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      applicationType = s"$prefix${sep}application_type"
    )

    def parser(
      applicationType: String = "application_type"
    ): RowParser[io.flow.registry.v0.models.ApplicationPutForm] = {
      io.flow.registry.v0.anorm.parsers.ApplicationType.parser(applicationType) map {
        case applicationType => {
          io.flow.registry.v0.models.ApplicationPutForm(
            applicationType = applicationType
          )
        }
      }
    }

  }

  object Port {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      applicationId = s"$prefix${sep}application_id",
      number = s"$prefix${sep}number"
    )

    def parser(
      id: String = "id",
      applicationId: String = "application_id",
      number: String = "number"
    ): RowParser[io.flow.registry.v0.models.Port] = {
      SqlParser.str(id) ~
      SqlParser.str(applicationId) ~
      SqlParser.long(number) map {
        case id ~ applicationId ~ number => {
          io.flow.registry.v0.models.Port(
            id = id,
            applicationId = applicationId,
            number = number
          )
        }
      }
    }

  }

}